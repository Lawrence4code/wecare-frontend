{"version":3,"sources":["_constants/alert.constants.js","_constants/user.constants.js","_constants/booking.constants.js","_reducers/authentication.reducer.js","_reducers/index.js","_reducers/user.reducer.js","_reducers/alert.reducer.js","_reducers/booking.reducer.js","_helpers/store.js","_helpers/history.js","_actions/alert.actions.js","_services/user.service.js","_services/booking.service.js","_actions/user.actions.js","_actions/booking.actions.js","_components/PrivateRoute.js","components/BookingModal.js","components/UserDashboard.js","components/RegisterModal.js","components/LoginModal.js","components/LandingPage.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["alertConstants","SUCCESS","ERROR","CLEAR","userConstants","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","bookingConstants","GET_ALLBOOKINGS_REQUEST","GET_ALLBOOKINGS_SUCCESS","GET_ALLBOOKINGS_FAILURE","ADD_BOOKING_REQUEST","ADD_BOOKING_SUCCESS","ADD_BOOKING_FAILURE","CANCEL_BOOKING_REQUEST","CANCEL_BOOKING_SUCCESS","CANCEL_BOOKING_FAILURE","user","JSON","parse","localStorage","getItem","initialState","loggedIn","rootReducer","combineReducers","authentication","state","action","type","loggingIn","userInfo","loading","userDetails","error","DELETE_REQUEST","items","map","id","deleting","DELETE_SUCCESS","filter","DELETE_FAILURE","deleteError","alert","message","bookings","bookingDetails","_id","date","startTime","newBooking","endTime","duration","createdAt","updatedBookingsAddingBooking","updatedBookingsAfterCancelling","booking","bookingId","persistConfig","key","storage","stateReconciler","autoMergeLevel2","blacklist","pReducer","persistReducer","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","store","createStore","persistor","persistStore","history","createBrowserHistory","alertActions","success","clear","baseAPI","userService","login","name","password","requestOptions","method","headers","body","stringify","fetch","then","handleResponse","result","setItem","token","userId","username","logout","register","email","removeItem","push","purge","response","text","data","ok","status","statusText","Promise","reject","bookingService","getAllBookings","addBooking","cancelBooking","userActions","dispatch","request","failure","bookingActions","PrivateRoute","Component","component","rest","render","props","to","pathname","from","location","Scheduler","confirm","Modal","BookingModal","inputValue","allBookings","bookedSlots","checkBookingAvailability","e","preventDefault","allBookedSlot","myBookedSlotsPlusBuffer","forEach","sixtyMinsBeforeStartTime","moment","subtract","format","sixtyMinsAfterEndTime","add","form","validateFields","err","values","selectedDate","availability","getAvailability","parseInt","interval","schedule","weekdays","unavailability","allocated","availabilityArray","Object","i","time","available","showConfirmBooking","noSlotAvaiable","resetFields","hideBookingModal","title","content","icon","onOk","selectedTime","payload","onCancel","apply","onNameInputChange","value","target","setState","onEmailInputChange","onPasswordInputChange","handleCancel","onChange","fieldsError","this","bookingModalVisible","getFieldDecorator","getFieldsError","isFieldTouched","getFieldError","dateError","timeError","visible","footer","style","top","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","validateStatus","help","rules","required","min","max","marginLeft","offset","disabled","keys","some","field","htmlType","WrappedBookingModal","Form","create","actionCreators","connectedBookingModal","connect","Footer","Layout","Panel","Collapse","UserDashboard","showBookingModal","currentBookings","isAfter","now","pastBookings","isBefore","className","onClick","defaultActiveKey","accordion","header","length","Meta","description","connectedUserDashboard","RegisterModal","handleSubmitForRegister","hideRegisterModal","registerModalVisible","usernameError","emailError","passwordError","prefix","color","placeholder","Password","WrappedRegisterModal","connectedRegisterModal","React","createContext","LoginModal","handleSubmitForLogin","hideLoginModal","loginModalVisible","WrappedLoginModal","connectedLoginModal","LandingPage","showRegisterModal","showLoginModal","alertType","registerSuccessInfo","registerFailureInfo","info","alertClear","connectedLandingPage","Header","theme","mode","defaultSelectedKeys","connectedHeader","App","listen","clearAlerts","exact","path","Dashboard","connectedApp","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1aa2f59e.chunk.js","sourcesContent":["export const alertConstants = {\n  SUCCESS: 'ALERT_SUCCESS',\n  ERROR: 'ALERT_ERROR',\n  CLEAR: 'ALERT_CLEAR'\n};\n","export const userConstants = {\n  REGISTER_REQUEST: 'USERS_REGISTER_REQUEST',\n  REGISTER_SUCCESS: 'USERS_REGISTER_SUCCESS',\n  REGISTER_FAILURE: 'USERS_REGISTER_FAILURE',\n\n  LOGIN_REQUEST: 'USERS_LOGIN_REQUEST',\n  LOGIN_SUCCESS: 'USERS_LOGIN_SUCCESS',\n  LOGIN_FAILURE: 'USERS_LOGIN_FAILURE',\n\n  LOGOUT: 'USERS_LOGOUT',\n};\n","export const bookingConstants = {\n  GET_ALLBOOKINGS_REQUEST: 'GET_ALLBOOKINGS_REQUEST',\n  GET_ALLBOOKINGS_SUCCESS: 'GET_ALLBOOKINGS_SUCCESS',\n  GET_ALLBOOKINGS_FAILURE: 'GET_ALLBOOKINGS_FAILURE',\n\n  ADD_BOOKING_REQUEST: 'ADD_BOOKING_REQUEST',\n  ADD_BOOKING_SUCCESS: 'ADD_BOOKING_SUCCESS',\n  ADD_BOOKING_FAILURE: 'ADD_BOOKING_FAILURE',\n\n  CANCEL_BOOKING_REQUEST: 'CANCEL_BOOKING_REQUEST',\n  CANCEL_BOOKING_SUCCESS: 'CANCEL_BOOKING_SUCCESS',\n  CANCEL_BOOKING_FAILURE: 'CANCEL_BOOKING_FAILURE',\n};\n","\nimport { userConstants } from '../_constants';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? { loggedIn: true, user } : {};\n\nexport function authentication(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        loggingIn: true,\n        user: action.user\n      };\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n        user: action.userInfo\n      };\n    case userConstants.LOGIN_FAILURE:\n      return {};\n    case userConstants.LOGOUT:\n      return {};\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux';\n\nimport { authentication } from './authentication.reducer';\nimport { user } from './user.reducer';\nimport { alert } from './alert.reducer';\nimport { bookings } from './booking.reducer'\n\nconst rootReducer = combineReducers({\n  authentication,\n  user,\n  alert,\n  bookings\n});\n\nexport default rootReducer;","import { userConstants } from '../_constants';\n\nexport function user(state = {}, action) {\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        loading: true\n      };\n    case userConstants.LOGIN_SUCCESS:\n\n      return {\n        userDetails: action.userInfo\n      };\n    case userConstants.LOGIN_FAILURE:\n      return {\n        error: action.error\n      };\n    case userConstants.DELETE_REQUEST:\n      // add 'deleting:true' property to user being deleted\n      return {\n        ...state,\n        items: state.items.map(user =>\n          user.id === action.id\n            ? { ...user, deleting: true }\n            : user\n        )\n      };\n    case userConstants.DELETE_SUCCESS:\n      // remove deleted user from state\n      return {\n        items: state.items.filter(user => user.id !== action.id)\n      };\n    case userConstants.DELETE_FAILURE:\n      // remove 'deleting:true' property and add 'deleteError:[error]' property to user \n      return {\n        ...state,\n        items: state.items.map(user => {\n          if (user.id === action.id) {\n            // make copy of user without 'deleting:true' property\n            const { deleting, ...userCopy } = user;\n            // return copy of user with 'deleteError:[error]' property\n            return { ...userCopy, deleteError: action.error };\n          }\n\n          return user;\n        })\n      };\n    default:\n      return state\n  }\n}","import { alertConstants } from '../_constants';\n\nexport function alert(state = { type: null }, action) {\n  switch (action.type) {\n    case alertConstants.SUCCESS:\n      return {\n        type: 'alert-success',\n        message: action.message\n      };\n    case alertConstants.ERROR:\n      return {\n        type: 'alert-danger',\n        message: action.message\n      };\n    case alertConstants.CLEAR:\n      return {};\n    default:\n      return state\n  }\n}","import { bookingConstants } from '../_constants';\n\nexport function bookings(state = { loading: false, bookings: [] }, action) {\n  switch (action.type) {\n    case bookingConstants.GET_ALLBOOKINGS_REQUEST:\n      return {\n        loading: true,\n        bookings: []\n      };\n    case bookingConstants.GET_ALLBOOKINGS_SUCCESS:\n      return {\n        loading: false,\n        bookings: action.bookings\n      };\n    case bookingConstants.GET_ALLBOOKINGS_FAILURE:\n      return {\n        error: action.error\n      };\n    case bookingConstants.ADD_BOOKING_REQUEST:\n      return {\n        loading: true,\n        bookings: [...state.bookings]\n      }\n    case bookingConstants.ADD_BOOKING_SUCCESS:\n      const { _id, date, startTime, id, endTime, duration, createdAt } = action.bookingDetails;\n      const newBooking = { _id, id, date, startTime, endTime, duration, createdAt };\n      const updatedBookingsAddingBooking = [...state.bookings, newBooking];\n      return {\n        loading: false,\n        bookings: [...updatedBookingsAddingBooking]\n      }\n    case bookingConstants.CANCEL_BOOKING_SUCCESS:\n      const updatedBookingsAfterCancelling = state.bookings.filter((booking) => {\n        return booking._id !== action.bookingId;\n      })\n      return {\n        loading: false,\n        bookings: [...updatedBookingsAfterCancelling]\n      }\n    default:\n      return state\n  }\n}","import { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunkMiddleware from 'redux-thunk';\n\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\nimport rootReducer from '../_reducers'; // the value from combineReducers\n\nconst persistConfig = {\n  key: 'root',\n  storage: storage,\n  stateReconciler: autoMergeLevel2, // see \"Merge Process\" section for details.\n  blacklist: ['alert']\n};\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst enhancer = composeEnhancers(\n  applyMiddleware(thunkMiddleware),\n  // other store enhancers if any\n);\n\nexport const store = createStore(pReducer, enhancer);\nexport const persistor = persistStore(store);\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","import { alertConstants } from '../_constants';\n\nexport const alertActions = {\n  success,\n  error,\n  clear\n};\n\nfunction success(message) {\n  return { type: alertConstants.SUCCESS, message };\n}\n\nfunction error(message) {\n  return { type: alertConstants.ERROR, message };\n}\n\nfunction clear() {\n  return { type: alertConstants.CLEAR };\n}","// import { authHeader } from '../_helpers';\nimport { history } from '../_helpers';\nimport { persistor } from '../_helpers';\n\nconst baseAPI = \"https://infinite-savannah-30830.herokuapp.com\";\n\nexport const userService = {\n  login,\n  logout,\n  register\n};\n\nfunction register({ name, email, password }) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ name, email, password })\n  };\n\n  return fetch(`${baseAPI}/register`, requestOptions).then(handleResponse);\n}\n\n\nfunction login(name, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ name, password })\n  };\n\n  return fetch(`${baseAPI}/login`, requestOptions)\n    .then(handleResponse)\n    .then(({ result }) => {\n      localStorage.setItem('userToken', JSON.stringify(result.token));\n      localStorage.setItem('userId', JSON.stringify(result.userId));\n      localStorage.setItem('username', JSON.stringify(result.username));\n      return result;\n    });\n}\n\nfunction logout() {\n  localStorage.removeItem('userToken');\n  localStorage.removeItem('userId');\n  history.push('/');\n  persistor.purge();\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","export const bookingService = {\n  getAllBookings,\n  addBooking,\n  cancelBooking\n};\n\nconst baseAPI = \"https://infinite-savannah-30830.herokuapp.com\";\n\nfunction getAllBookings() {\n  const requestOptions = {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json' }\n  };\n\n  return fetch(`${baseAPI}/getBookings`, requestOptions).then(handleResponse);\n}\n\nfunction addBooking({ id, date, startTime, endTime, duration, createdAt }) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ id, date, startTime, endTime, duration, createdAt })\n  };\n\n  return fetch(`${baseAPI}/booking`, requestOptions).then(handleResponse);\n}\n\nfunction cancelBooking(bookingId) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ bookingId })\n  };\n\n  return fetch(`${baseAPI}/booking`, requestOptions).then(handleResponse);\n}\n\n\n\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        // logout();\n      }\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n    return data.result;\n  });\n}","import { userConstants } from '../_constants';\nimport { userService } from '../_services';\nimport { alertActions } from './';\nimport { history } from '../_helpers';\n\nexport const userActions = {\n  register,\n  login,\n  logout\n};\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n\n    userService.register(user)\n      .then(\n        user => {\n          dispatch(success());\n          dispatch(alertActions.success('Registration successful'));\n        },\n        error => {\n          dispatch(failure(error));\n          dispatch(alertActions.error(error));\n        }\n      );\n  };\n\n  function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n  function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n  function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction login(username, password) {\n  return dispatch => {\n    dispatch(request({ username }));\n\n    userService.login(username, password)\n      .then(\n        user => {\n          dispatch(success(user));\n          history.push('/dashboard');\n        },\n        error => {\n          dispatch(failure(error));\n          dispatch(alertActions.error(error));\n        }\n      );\n  };\n\n  function request(user) { return { type: userConstants.LOGIN_REQUEST, userInfo: user } }\n  function success(user) { return { type: userConstants.LOGIN_SUCCESS, userInfo: user } }\n  function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n  userService.logout();\n  return { type: userConstants.LOGOUT };\n}","import { bookingConstants } from '../_constants';\nimport { bookingService } from '../_services';\nimport { alertActions } from './';\n\n\nexport const bookingActions = {\n  getAllBookings,\n  addBooking,\n  cancelBooking\n};\n\n// action to get all bookings\nfunction getAllBookings() {\n  return dispatch => {\n    dispatch(request());\n\n    bookingService.getAllBookings()\n      .then(\n        bookings => {\n          return dispatch(success(bookings))\n        },\n        error => dispatch(failure(error))\n      );\n  };\n\n  function request(bookings) { return { type: bookingConstants.GET_ALLBOOKINGS_REQUEST, bookings } }\n  function success(bookings) { return { type: bookingConstants.GET_ALLBOOKINGS_SUCCESS, bookings } }\n  function failure(error) { return { type: bookingConstants.GET_ALLBOOKINGS_FAILURE, error } }\n}\n\n// action for adding a booking\nfunction addBooking(bookingDetails) {\n  return dispatch => {\n    dispatch(request(bookingDetails));\n\n    bookingService.addBooking(bookingDetails)\n      .then(\n        bookings => {\n          dispatch(success(bookings));\n          dispatch(alertActions.success('Booking successful'));\n        },\n        error => {\n          dispatch(failure(error));\n          dispatch(alertActions.error(error));\n        }\n      );\n  };\n\n  function request(bookingDetails) { return { type: bookingConstants.ADD_BOOKING_REQUEST, bookingDetails } }\n  function success(bookingDetails) { return { type: bookingConstants.ADD_BOOKING_SUCCESS, bookingDetails } }\n  function failure(error) { return { type: bookingConstants.ADD_BOOKING_FAILURE, error } }\n}\n\n// action for cancelling a booking\nfunction cancelBooking(bookingId) {\n  return dispatch => {\n    dispatch(request(bookingId));\n\n    bookingService.cancelBooking(bookingId)\n      .then(\n        bookings => {\n          dispatch(success(bookingId));\n          dispatch(alertActions.success('Booking Cancelled Successfully'));\n        },\n        error => {\n          dispatch(failure(error));\n          dispatch(alertActions.error(error));\n        }\n      );\n  };\n\n  function request(bookingId) { return { type: bookingConstants.CANCEL_BOOKING_REQUEST, bookingId } }\n  function success(bookingId) { return { type: bookingConstants.CANCEL_BOOKING_SUCCESS, bookingId } }\n  function failure(error) { return { type: bookingConstants.CANCEL_BOOKING_FAILURE, error } }\n}","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route {...rest} render={props => (\n    localStorage.getItem('userToken')\n      ? <Component {...props} />\n      : <Redirect to={{ pathname: '/', state: { from: props.location } }} />\n  )} />\n)","\nimport React, { Component } from 'react';\nimport { Modal, Form, Button, DatePicker, TimePicker, Slider, InputNumber, Row, Col } from 'antd';\nimport { Scheduler } from '@ssense/sscheduler';\nimport * as moment from 'moment';\nimport { connect } from 'react-redux';\n\nimport { bookingActions } from '../_actions';\n\nconst booking = new Scheduler();\nconst { confirm } = Modal;\n\n// to show field error and disable button\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\nclass BookingModal extends Component {\n    state = {\n        inputValue: 10,\n        allBookings: [],\n        bookedSlots: []\n    };\n\n    checkBookingAvailability = e => {\n        e.preventDefault();\n        // all the booked slots\n        const allBookedSlot = this.props.allBookings.bookings.map(booking => {\n            return { date: booking.date, from: booking.startTime, to: booking.endTime }\n        });\n\n        // avoid booking 60 mins before or after on already booked slot by individual user\n        const myBookedSlotsPlusBuffer = [];\n        this.props.allBookings.bookings.forEach(booking => {\n            const userId = localStorage.getItem('userId');\n            const sixtyMinsBeforeStartTime = moment(`${booking.date}, ${booking.startTime}`).subtract('60', 'minutes').format('HH:mm');\n            const sixtyMinsAfterEndTime = moment(`${booking.date}, ${booking.startTime}`).add('60', 'minutes').format('HH:mm');\n            if (userId === `\"${booking.id}\"`) {\n                myBookedSlotsPlusBuffer.push({ date: booking.date, from: sixtyMinsBeforeStartTime, to: sixtyMinsAfterEndTime })\n            }\n        });\n\n        this.props.form.validateFields((err, values) => {\n            const selectedDate = moment(values['date']);\n            const availability = booking.getAvailability({\n                from: values['date'].format('YYYY-MM-DD'),\n                to: selectedDate.add('days', 1).format('YYYY-MM-DD'),\n                duration: parseInt(this.state.inputValue),\n                interval: parseInt(this.state.inputValue),\n                schedule: {\n                    weekdays: {\n                        from: values['startTime'].format('HH:mm'), to: '23:00'\n                    },\n                    unavailability: [...allBookedSlot, ...myBookedSlotsPlusBuffer],\n                    allocated: [\n                    ]\n                }\n            });\n            const availabilityArray = availability !== {} && Object.values(availability)[0];\n            for (let i of availabilityArray) {\n                if (values['startTime'].format('HH:mm') === i.time) {\n                    if (i.available === true) {\n                        this.showConfirmBooking(this.props, this.state);\n                        return true;\n                    }\n                    this.noSlotAvaiable();\n                    return false;\n                }\n                return false;\n            }\n            this.props.form.resetFields()\n            this.props.hideBookingModal(false);\n        });\n    }\n\n    showConfirmBooking = () => {\n        confirm({\n            title: 'Nice, your selected time slot is avaiable!',\n            content: 'Would like confirm your booking?',\n            icon: \"check-circle\",\n            onOk: () => {\n                this.props.form.validateFields((err, values) => {\n                    if (!err) {\n                        const selectedTime = moment(values['startTime']);\n                        const payload = {\n                            id: this.props.user.userDetails.userId,\n                            date: values['date'].format('YYYY-MM-DD'),\n                            startTime: values['startTime'].format('HH:mm'),\n                            endTime: selectedTime.add(this.state.inputValue, 'minutes').format('HH:mm'),\n                            duration: this.state.inputValue,\n                            createdAt: moment().format('LLLL')\n                        }\n                        this.props.addBooking(payload);\n                    }\n                    this.props.form.resetFields()\n                    this.props.hideBookingModal(false);\n                })\n            },\n            onCancel() {\n                // do nothing\n            },\n        }).apply(this);\n    }\n\n    noSlotAvaiable = () => {\n        Modal.error({\n            title: 'Oops',\n            content: 'Your selected slot is not avaiable, please try different time slots',\n        });\n    }\n\n    onNameInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { name: value }\n        })\n    }\n\n    onEmailInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { email: value }\n        })\n    }\n    onPasswordInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { password: value }\n        })\n    }\n\n    handleCancel = () => {\n        this.setState(() => {\n            return {\n                username: '',\n                email: '',\n                password: '',\n            };\n        })\n        this.props.form.resetFields();\n        this.props.hideBookingModal(false);\n    };\n\n    onChange = value => {\n        this.setState({\n            inputValue: value\n        });\n    };\n\n\n    render() {\n        const { inputValue } = this.state;\n        const { bookingModalVisible } = this.props;\n        const { getFieldDecorator, getFieldsError, isFieldTouched, getFieldError } = this.props.form;\n        const dateError = isFieldTouched('date') && getFieldError('date');\n        const timeError = isFieldTouched('startTime') && getFieldError('startTime');\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const dateConfig = {\n            rules: [{ type: 'object', required: true, message: 'Please select date.' }],\n        };\n        const timeConfig = {\n            rules: [{ type: 'object', required: true, message: 'Please select time.' }],\n        };\n        return (\n            <div>\n                <Modal\n                    visible={bookingModalVisible}\n                    title=\"Please fill up details to make a fresh reservation.\"\n                    onCancel={this.handleCancel}\n                    footer={null}\n                    style={{ top: 200 }}\n                >\n                    <Form {...formItemLayout} onSubmit={this.checkBookingAvailability}>\n                        <Form.Item label=\"Booking date\" validateStatus={dateError ? 'error' : ''} help={dateError || ''}>\n                            {getFieldDecorator('date', dateConfig)(<DatePicker />)}\n                        </Form.Item>\n                        <Form.Item label=\"Duration (mins)\">\n                            <Row>\n                                <Col span={12}>\n                                    <Slider\n                                        min={10}\n                                        max={60}\n                                        onChange={this.onChange}\n                                        value={typeof inputValue === \"number\" ? inputValue : 0}\n                                    />\n                                </Col>\n                                <Col span={4}>\n                                    <InputNumber\n                                        min={10}\n                                        max={60}\n                                        style={{ marginLeft: 16 }}\n                                        value={inputValue}\n                                        onChange={this.onChange}\n                                    />\n                                </Col>\n                            </Row>\n                        </Form.Item>\n                        <Form.Item label=\"Start Time\" validateStatus={timeError ? 'error' : ''} help={timeError || ''}>\n                            {getFieldDecorator('startTime', timeConfig)(<TimePicker />)}\n                        </Form.Item>\n                        <Form.Item\n                            wrapperCol={{\n                                xs: { span: 24, offset: 0 },\n                                sm: { span: 16, offset: 8 },\n                            }}\n                        >\n                            <Button type=\"primary\" disabled={hasErrors(getFieldsError())} htmlType=\"submit\">Check availability</Button>\n                            {/* <Button type=\"primary\" disabled={hasErrors(getFieldsError())} htmlType=\"submit\">Submit</Button> */}\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nconst WrappedBookingModal = Form.create({ name: 'normal_register' })(BookingModal);\n\nfunction mapState(state) {\n    return {\n        allBookings: state.bookings,\n        user: state.user\n    };\n}\n\n// action need to get all bookings\nconst actionCreators = {\n    addBooking: bookingActions.addBooking,\n};\n\nconst connectedBookingModal = connect(mapState, actionCreators)(WrappedBookingModal);\n\nexport default connectedBookingModal;","import React, { Component } from 'react';\nimport { Layout, Button, Collapse, List } from 'antd';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\n// internal imports\nimport '../styles/UserDashboard.scss';\nimport BookingModal from './BookingModal';\nimport { bookingActions } from '../_actions';\n\nconst { Footer } = Layout;\nconst { Panel } = Collapse;\n\nclass UserDashboard extends Component {\n    state = {\n        bookingModalVisible: false,\n    };\n\n    componentDidMount() {\n        // get all bookings to check the avaiable time slots\n        this.props.getAllBookings();\n    }\n\n    cancelBooking(bookingId) {\n        this.props.cancelBooking(bookingId);\n    }\n\n    showBookingModal = () => {\n        this.setState({\n            bookingModalVisible: true,\n        });\n    };\n\n    hideBookingModal = (value) => {\n        this.setState({\n            bookingModalVisible: value,\n        });\n    };\n\n    render() {\n        const userId = localStorage.getItem('userId');\n        const currentBookings = this.props.allBookings.bookings.filter(booking => {\n            return userId === `\"${booking.id}\"` && moment(`${booking.date} ${booking.endTime}`).isAfter(moment.now());\n        })\n        const pastBookings = this.props.allBookings.bookings.filter(booking => {\n            return userId === `\"${booking.id}\"` && moment(`${booking.date} ${booking.endTime}`).isBefore(moment.now());\n        })\n        return (\n            <div>\n                <Layout>\n                    <section className=\"dashboard\">\n                        <div className=\"dashboard__bookings\">\n                            <Button className=\"dashboard__addBooking\" type=\"primary\" onClick={this.showBookingModal}> Make new booking</Button>\n                            <Collapse className=\"accordion\" defaultActiveKey={[\"1\"]} accordion>\n                                <Panel header=\"Current Bookings\" key=\"1\">\n                                    <List>\n                                        {currentBookings.length === 0 ?\n                                            <div className=\"noBooking\">\n                                                <p> No Bookings </p>\n                                            </div>\n                                            : currentBookings.map((booking) => {\n                                                return (<List.Item key={booking._id}>\n                                                    <List.Item.Meta\n                                                        title={`Date: ${booking.date}`}\n                                                        description={`Slot: ${booking.startTime} - ${booking.endTime}, Duration: ${booking.duration} mins`}\n                                                    />\n                                                    <Button type=\"danger\" onClick={() => this.cancelBooking(booking._id)}>Delete</Button>\n                                                </List.Item >)\n                                            })}\n                                    </List>\n                                </Panel>\n                                <Panel header=\"History\" key=\"2\">\n                                    <List>\n                                        {pastBookings.length === 0 ?\n                                            <div className=\"noBooking\">\n                                                <p> No History </p>\n                                            </div>\n                                            : pastBookings.map((booking) => {\n                                                return (<List.Item key={booking._id}>\n                                                    <List.Item.Meta\n                                                        title={`Date: ${booking.date}`}\n                                                        description={`Slot: ${booking.startTime} - ${booking.endTime}, Duration: ${booking.duration} mins`}\n                                                    />\n                                                </List.Item >)\n                                            })}\n                                    </List>\n                                </Panel>\n                            </Collapse>\n                        </div>\n\n                    </section>\n                    <Footer className='dashboard__footer'> @Copyright Ping Pong LLC</Footer>\n                    <BookingModal bookingModalVisible={this.state.bookingModalVisible} hideBookingModal={this.hideBookingModal}></BookingModal>\n                </Layout>\n            </div >\n        )\n    }\n}\n\n// map store bookings to component props\nfunction mapState(state) {\n    return {\n        allBookings: state.bookings,\n        user: state.user\n    };\n}\n\n// action need to get all bookings\nconst actionCreators = {\n    getAllBookings: bookingActions.getAllBookings,\n    cancelBooking: bookingActions.cancelBooking\n};\n\nconst connectedUserDashboard = connect(mapState, actionCreators)(UserDashboard);\n\nexport default connectedUserDashboard;","import React, { Component } from 'react';\nimport { Modal, Form, Icon, Input, Button } from 'antd';\nimport { connect } from 'react-redux';\n\n// internal imports\nimport { userActions } from '../_actions';\nimport '../styles/RegisterModal.scss';\n\n// to show field error and disable button\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass RegisterModal extends Component {\n    state = {\n        username: '',\n        email: '',\n        password: ''\n    };\n\n    componentDidMount() {\n        // To disabled submit button at the beginning.\n        this.props.form.validateFields();\n    }\n\n\n    handleSubmitForRegister = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, { name, email, password }) => {\n            if (!err) {\n                this.props.register({ name, email, password })\n            }\n            this.props.form.resetFields()\n            this.props.hideRegisterModal(false);\n        });\n    };\n\n    onNameInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { name: value }\n        })\n    }\n\n    onEmailInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { email: value }\n        })\n    }\n    onPasswordInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { password: value }\n        })\n    }\n\n    handleCancel = () => {\n        this.setState(() => {\n            return {\n                username: '',\n                email: '',\n                password: '',\n            };\n        })\n        this.props.form.resetFields();\n        this.props.hideRegisterModal(false);\n    };\n\n\n    render() {\n        const { registerModalVisible } = this.props;\n        const { getFieldDecorator, getFieldsError, isFieldTouched, getFieldError } = this.props.form;\n        const usernameError = isFieldTouched('name') && getFieldError('name');\n        const emailError = isFieldTouched('email') && getFieldError('email');\n        const passwordError = isFieldTouched('password') && getFieldError('password');\n        return (\n            <Modal\n                visible={registerModalVisible}\n                title=\"Please fill up below details to register with us.\"\n                onCancel={this.handleCancel}\n                footer={null}\n                style={{ top: 200 }}\n            >\n                <Form onSubmit={this.handleSubmitForRegister} className=\"register-form\">\n                    <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n                        {getFieldDecorator('name', {\n                            rules: [{ required: true, message: 'Please enter your name.' }, { min: 4, max: 10, message: 'Username must between 4 to 10 characters.' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Name\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item validateStatus={emailError ? 'error' : ''} help={emailError || ''}>\n                        {getFieldDecorator('email', {\n                            rules: [{ type: \"email\", required: true, message: 'Please input your Email address!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Email address\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n                        {getFieldDecorator('password', {\n                            rules: [{ required: true, message: 'Please input your Password!' },\n                            { min: 6, message: 'Password must atleast 6 characters.' },\n                            { max: 25, message: 'Password cannot exceed 25 characters.' }],\n                        })(\n                            <Input.Password\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())} className=\"register-form-button\">Register</Button>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\n// antd form wrapper\nconst WrappedRegisterModal = Form.create({ name: 'normal_register' })(RegisterModal);\n\n\n// action required for register functionality\nconst actionCreators = {\n    register: userActions.register\n}\n\nconst connectedRegisterModal = connect(null, actionCreators)(WrappedRegisterModal);\n\nexport default connectedRegisterModal;\n","import React, { Component } from 'react';\nimport { Modal, Form, Icon, Input, Button } from 'antd';\nimport { connect } from 'react-redux';\n\nimport { userActions } from '../_actions';\n\n// to show field error and disable button\nfunction hasErrors(fieldsError) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nReact.createContext()\nclass LoginModal extends Component {\n    state = {\n        name: '',\n        password: '',\n    };\n\n    componentDidMount() {\n        // To disabled submit button at the beginning.\n        this.props.form.validateFields();\n    }\n\n    handleSubmitForLogin = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, { username, password }) => {\n            if (!err) {\n                this.props.login(username, password);\n            }\n            this.props.form.resetFields();\n            this.props.hideLoginModal(false);\n        });\n    };\n\n    onNameInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { name: value }\n        })\n    }\n\n    onEmailInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { email: value }\n        })\n    }\n    onPasswordInputChange = e => {\n        const { value } = e.target;\n        this.setState(() => {\n            return { password: value }\n        })\n    }\n\n    handleCancel = () => {\n        this.setState(() => {\n            return {\n                username: '',\n                password: '',\n            };\n        })\n        this.props.form.resetFields();\n        this.props.hideLoginModal(false);\n    };\n\n    render() {\n        const { loginModalVisible } = this.props;\n        const { getFieldDecorator, getFieldsError, isFieldTouched, getFieldError } = this.props.form;\n        const usernameError = isFieldTouched('username') && getFieldError('username');\n        const passwordError = isFieldTouched('password') && getFieldError('password');\n        return (\n            <Modal\n                visible={loginModalVisible}\n                title=\"Please login to access your account.\"\n                onCancel={this.handleCancel}\n                footer={null}\n                style={{ top: 200 }}\n            >\n                <Form onSubmit={this.handleSubmitForLogin} className=\"login-form\">\n                    <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n                        {getFieldDecorator('username', {\n                            rules: [{ required: true, message: 'Please enter your Username.' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Username\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n                        {getFieldDecorator('password', {\n                            rules: [{ required: true, message: 'Please input your Password.' }],\n                        })(\n                            <Input.Password\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())} className=\"login-form-button\">\n                        Log in</Button>\n                </Form>\n            </Modal>\n        )\n    }\n}\n\nconst WrappedLoginModal = Form.create({ name: 'normal_login' })(LoginModal);\n\nconst actionCreators = {\n    login: userActions.login,\n    logout: userActions.logout\n};\n\nconst connectedLoginModal = connect(null, actionCreators)(WrappedLoginModal);\nexport default connectedLoginModal;","import React, { Component } from 'react';\nimport { Layout, Button, Modal } from 'antd';\nimport { connect } from 'react-redux';\n\n// internal imports\nimport RegisterModal from './RegisterModal';\nimport LoginModal from './LoginModal';\nimport { alertActions } from '../_actions';\nimport { history } from '../_helpers'\nimport '../styles/LandingPage.scss';\n\n\nconst { Footer } = Layout;\n\nclass LandingPage extends Component {\n    state = {\n        registerModalVisible: false,\n        loginModalVisible: false\n    };\n\n    componentDidUpdate() {\n        if (this.props.alertType === \"alert-success\") {\n            this.registerSuccessInfo();\n        } else if (this.props.alertType === \"alert-danger\") {\n            this.registerFailureInfo();\n        } else {\n            // this.generalFailureInfo();\n        }\n    }\n\n    registerSuccessInfo() {\n        Modal.info({\n            title: 'Awesome, you register successfully',\n            content: (\n                <div>\n                    <p>We have sent you a confirmation email. And you may login to start using out service.</p>\n                </div>\n            ),\n            onOk: () => {\n                this.props.alertClear();\n                history.push('/login')\n            },\n        });\n    }\n\n    registerFailureInfo() {\n        Modal.info({\n            title: 'Username/email already taken, please try different username/email.',\n            content: (\n                <div>\n                    <p>If you have registered already, please login to continue.</p>\n                </div>\n            ),\n            onOk() {\n\n            },\n        });\n    }\n\n    generalFailureInfo() {\n        Modal.info({\n            title: 'Awesome, you register successfully',\n            content: (\n                <div>\n                    <p>We have sent you a confirmation email. And you may login to start using out service.</p>\n                </div>\n            ),\n            onOk() {\n\n            },\n        });\n    }\n\n    showRegisterModal = () => {\n        this.setState({\n            registerModalVisible: true,\n        });\n    };\n\n    showLoginModal = () => {\n        this.setState({\n            loginModalVisible: true,\n        });\n    };\n\n    hideRegisterModal = (value) => {\n        this.setState({\n            registerModalVisible: value,\n        });\n\n    };\n\n    hideLoginModal = (value) => {\n        this.setState({\n            loginModalVisible: value,\n        });\n\n    };\n\n    render() {\n        return (\n            <Layout>\n                <section className=\"hero\">\n                    <Button className=\"hero__ctaButton\" type=\"primary\" onClick={this.showLoginModal}> Book Table Now!</Button>\n                </section>\n                <Footer className='footer'> @Copyright Ping Pong LLC</Footer>\n                <RegisterModal registerModalVisible={this.state.registerModalVisible} hideRegisterModal={this.hideRegisterModal}></RegisterModal>\n                <LoginModal loginModalVisible={this.state.loginModalVisible} hideLoginModal={this.hideLoginModal}></LoginModal>\n            </Layout>\n        )\n    }\n}\n\n\n// store state to component props\nfunction mapState(state) {\n    const { type } = state.alert;\n    return { alertType: type };\n}\n\n// action required for register functionality\nconst actionCreators = {\n    alertClear: alertActions.clear\n}\n\nconst connectedLandingPage = connect(mapState, actionCreators)(LandingPage);\n\nexport default connectedLandingPage;\n","import React, { Component } from 'react';\nimport { Menu } from 'antd';\nimport { connect } from 'react-redux';\nimport { userActions } from '../_actions';\n\n// internal imports\nimport RegisterModal from './RegisterModal';\nimport LoginModal from './LoginModal';\nimport '../styles/Header.scss';\n\nclass Header extends Component {\n    state = {\n        registerModalVisible: false,\n        loginModalVisible: false\n    };\n\n    showRegisterModal = () => {\n        this.setState({\n            registerModalVisible: true,\n        });\n    };\n\n    showLoginModal = () => {\n\n        this.setState({\n            loginModalVisible: true,\n        });\n    };\n\n    hideRegisterModal = (value) => {\n        this.setState({\n            registerModalVisible: value,\n        });\n\n    };\n\n    hideLoginModal = (value) => {\n        this.setState({\n            loginModalVisible: value,\n        });\n\n    };\n\n\n    render() {\n        return (\n            <div>\n                {this.props.loggedIn ?\n                    <header>\n                        <div className=\"logo\" >Ping Pong</div>\n                        <Menu className=\"menu\"\n                            theme=\"dark\"\n                            mode=\"horizontal\"\n                        >\n                            <Menu.Item className=\"menu__item\" key=\"logout\" onClick={this.props.logout}>Logout</Menu.Item>\n                        </Menu>\n                    </header> :\n                    <header>\n                        <div className=\"logo\" >Ping Pong</div>\n                        <Menu className=\"menu\"\n                            theme=\"dark\"\n                            mode=\"horizontal\"\n                            defaultSelectedKeys={['login']}\n                        >\n                            <Menu.Item className=\"menu__item\" key=\"register\" onClick={this.showRegisterModal}>Register</Menu.Item>\n                            <Menu.Item className=\"menu__item\" key=\"login\" onClick={this.showLoginModal}>Login</Menu.Item>\n                        </Menu>\n                    </header>\n                }\n                <RegisterModal registerModalVisible={this.state.registerModalVisible} hideRegisterModal={this.hideRegisterModal}></RegisterModal>\n                <LoginModal loginModalVisible={this.state.loginModalVisible} hideLoginModal={this.hideLoginModal}></LoginModal>\n            </div>\n        )\n    }\n}\n\n\nfunction mapState(state) {\n    const { loggedIn } = state.authentication;\n    return { loggedIn };\n}\n\n\nconst actionCreators = {\n    logout: userActions.logout\n};\n\nconst connectedHeader = connect(mapState, actionCreators)(Header);\n\nexport default connectedHeader;","import React from 'react';\nimport { Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { history } from './_helpers';\nimport { alertActions } from './_actions';\nimport { PrivateRoute } from './_components';\nimport Dashboard from './components/UserDashboard';\nimport LandingPage from './components/LandingPage';\nimport './App.scss';\nimport 'antd/dist/antd.css';\nimport Header from './components/Header';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    history.listen((location, action) => {\n      // clear alert on location change\n      this.props.clearAlerts();\n    });\n  }\n\n  render() {\n    const { alert } = this.props;\n    return (\n      <div>\n        {alert.message &&\n          <div className={`alert ${alert.type}`}>{alert.message}</div>\n        }\n        <Router history={history}>\n          <Header />\n          <Switch>\n            <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/\" component={LandingPage} />\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nfunction mapState(state) {\n  const { alert } = state;\n  return { alert };\n}\n\nconst actionCreators = {\n  clearAlerts: alertActions.clear\n};\n\nconst connectedApp = connect(mapState, actionCreators)(App);\nexport default connectedApp;\n\n// function App() {\n//   return (\n//     <Router>\n//       <div>\n//         <Header />\n//         <Switch>\n//           <Route path=\"/login\">\n//             <Content />\n//           </Route>\n//           <PrivateRoute Component={UserDashboard} path=\"/dashboard\">\n//           </PrivateRoute>\n//           <Route path=\"/\">\n//             <Content />\n//           </Route>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n\n// import React from 'react';\n// import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n// import './App.scss';\n// import 'antd/dist/antd.css';\n\n// // internal imports\n// import Content from './components/Content';\n// import UserDashboard from './components/UserDashboard';\n// import Header from './components/Header'\n\n\n// const fakeAuth = {\n//   isAuthenticated: true,\n//   // authenticate(cb) {\n//   //   this.isAuthenticated = true;\n//   //   setTimeout(cb, 100);\n//   // },\n//   // signout(cb) {\n//   //   this.isAuthenticated = false;\n//   //   setTimeout(cb, 100);\n//   // }\n// }\n\n\n// const PrivateRoute = ({ Component, ...rest }) => (\n//   <Route {...rest} render={(props) => (\n//     fakeAuth.isAuthenticated === true ? <Component {...props} /> : <Redirect to=\"/\" />\n//   )}>\n\n//   </Route>\n// )\n\n// function App() {\n//   return (\n//     <Router>\n//       <div>\n//         <Header />\n//         <Switch>\n//           <Route path=\"/login\">\n//             <Content />\n//           </Route>\n//           <PrivateRoute Component={UserDashboard} path=\"/dashboard\">\n//           </PrivateRoute>\n//           <Route path=\"/\">\n//             <Content />\n//           </Route>\n//         </Switch>\n//       </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store } from './_helpers/store';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}